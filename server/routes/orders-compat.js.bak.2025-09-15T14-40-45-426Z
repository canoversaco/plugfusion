
const DB = require("../db");
function who(req){ return (req.user && (req.user.id || req.user.user_id)) || req.headers["x-user-id"] || req.headers["x-user"] || null; }
async function q(sql, params=[]){
  try { return await DB.query(sql, params); } catch(e1) {
    if (sql.includes("?")){ let i=1; const pg=sql.replace(/\?/g, _=>"$"+(i++)); return await DB.query(pg, params); }
    throw e1;
  }
}
module.exports = (app) => {
  app.get("/api/my/orders", async (req,res)=>{
    const me=who(req);
    const sqls=[
      ["SELECT * FROM orders WHERE user_id = ? ORDER BY id DESC LIMIT 200",[me]],
      ["SELECT * FROM orders WHERE user_id = $1 ORDER BY id DESC LIMIT 200",[me]]
    ];
    for(const [sql,p] of sqls){ try{ const r=await q(sql,p); return res.json({orders:r.rows||r||[]}); }catch{} }
    res.json({ orders: [] });
  });
  app.get("/api/courier/orders", async (req,res)=>{
    const me=who(req);
    try{
      const r=await q("SELECT * FROM orders ORDER BY id DESC LIMIT 200",[]);
      const rows=r.rows||r||[];
      const mine=rows.filter(o=>{ const s=String(o.status||"").toLowerCase(); return ["open","accepted","in_progress","en_route"].includes(s) || (o.courier_id==me); });
      res.json({ orders: mine });
    }catch(e){ res.json({ orders: [] }); }
  });
  app.get("/api/orders", async (req,res)=>{
    const scope=String(req.query.scope||"");
    if (scope==="me") return app._router.handle({...req, url:"/api/my/orders", method:"GET"}, res, ()=>{});
    if (scope==="courier") return app._router.handle({...req, url:"/api/courier/orders", method:"GET"}, res, ()=>{});
    try{ const r=await q("SELECT * FROM orders ORDER BY id DESC LIMIT 100",[]); res.json({ orders:r.rows||r||[] }); }catch{ res.json({ orders: [] }); }
  });
  app.post("/api/orders/status", async (req,res)=>{
    const { id, status, courier_id } = req.body||{};
    const sqls=[
      ["UPDATE orders SET status = ?, courier_id = COALESCE(?, courier_id) WHERE id = ?", [status, courier_id||null, id]],
      ["UPDATE orders SET status = $1, courier_id = COALESCE($2, courier_id) WHERE id = $3", [status, courier_id||null, id]],
    ];
    for(const [sql,p] of sqls){ try{ await q(sql,p); return res.json({ok:true}); }catch{} }
    res.status(400).json({ error:"failed" });
  });
  app.post("/api/orders/:id/complete", async (req,res)=>{
    const id=req.params.id;
    const sqls=[
      ["UPDATE orders SET status = 'completed', completed_at = CURRENT_TIMESTAMP WHERE id = ?", [id]],
      ["UPDATE orders SET status = 'completed', completed_at = NOW() WHERE id = $1", [id]],
    ];
    for(const [sql,p] of sqls){ try{ await q(sql,p); return res.json({ok:true}); }catch{} }
    res.status(400).json({ error:"failed" });
  });
  app.post("/api/courier/accept", async (req,res)=>{
    const { order_id, courier_id } = req.body||{};
    const sqls=[
      ["UPDATE orders SET status = 'accepted', courier_id = ? WHERE id = ?", [courier_id||who(req), order_id]],
      ["UPDATE orders SET status = 'accepted', courier_id = $1 WHERE id = $2", [courier_id||who(req), order_id]],
    ];
    for(const [sql,p] of sqls){ try{ await q(sql,p); return res.json({ok:true}); }catch{} }
    res.status(400).json({ error:"failed" });
  });
};