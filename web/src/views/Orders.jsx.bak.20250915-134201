import React, { useEffect, useState } from "react";

async function j(url) { const r = await fetch(url); if (!r.ok) throw new Error(await r.text().catch(()=>r.statusText)); return r.json(); }

function normalizeItems(o) {
  const candidates = [
    o.items,
    o.lines,
    o.cart,
    (() => { try { return JSON.parse(o.cart_json || "{}").items; } catch { return null; }})(),
  ].find(Boolean) || [];
  return candidates.map(x => ({
    id: x.id || x.product_id,
    title: x.title || x.name,
    qty: x.qty || x.quantity || 1,
    price: Number(x.price ?? x.unit_price ?? 0)
  }));
}

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [err, setErr] = useState("");

  useEffect(() => {
    (async () => {
      setErr("");
      const endpoints = ["/api/my/orders","/api/orders?scope=me","/api/orders"];
      for (const u of endpoints) { try { const d=await j(u); setOrders(d.orders||d||[]); return; } catch{} }
      setOrders([]);
    })().catch(e=>setErr(String(e.message||e)));
  }, []);

  return (
    <div className="max-w-3xl mx-auto px-3 py-4">
      <h1 className="text-xl font-semibold mb-3">Meine Bestellungen</h1>
      {err && <div className="mb-3 p-2 rounded bg-rose-900/20 border border-rose-700 text-rose-300 text-sm">{err}</div>}
      {orders.length===0 ? <div className="text-zinc-400">Noch keine Bestellungen.</div> : (
        <div className="space-y-3">
          {orders.map(o => {
            const items = normalizeItems(o);
            return (
              <div key={o.id || o.order_id} className="p-3 rounded-xl bg-zinc-900/60 border border-zinc-800">
                <div className="flex items-center gap-2 mb-2">
                  <div className="font-medium">#{o.id || o.order_id}</div>
                  <div className="text-xs text-zinc-500">• {o.status || "—"}</div>
                </div>
                <div className="text-sm">
                  {items.length===0 ? <div className="text-zinc-400">Keine Positionen gefunden.</div> : (
                    <ul className="list-disc pl-5 space-y-1">
                      {items.map(it => <li key={it.id} className="text-zinc-300">{it.qty}× {it.title} · {(it.price*it.qty).toFixed(2)} €</li>)}
                    </ul>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
}
